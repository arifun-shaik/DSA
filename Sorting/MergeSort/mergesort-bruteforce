public class MergeSort {

    // Main function to sort an array
    public static void mergeSort(int[] arr, int start, int end) {
        if (start < end) {
            int mid = start + (end - start) / 2;

            // Divide step
            mergeSort(arr, start, mid);
            mergeSort(arr, mid + 1, end);

            // Conquer step
            merge(arr, start, mid, end);
        }
    }

    // Merge two sorted subarrays
    public static void merge(int[] arr, int start, int mid, int end) {
        int n1 = mid - start + 1;
        int n2 = end - mid;

        // Create temporary arrays
        int[] left = new int[n1];
        int[] right = new int[n2];

        // Copy data to temp arrays
        for (int i = 0; i < n1; i++) left[i] = arr[start + i];
        for (int j = 0; j < n2; j++) right[j] = arr[mid + 1 + j];

        // Merge the two arrays
        int i = 0, j = 0, k = start;

        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        // Copy remaining elements
        while (i < n1) arr[k++] = left[i++];
        while (j < n2) arr[k++] = right[j++];
    }

    // Driver method
    public static void main(String[] args) {
        int[] arr = {4, 1, 3, 9, 7};
        mergeSort(arr, 0, arr.length - 1);
        
        for (int num : arr) System.out.print(num + " ");
    }
}
